<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Synoptic Viewer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        #svgContainer {
            width: 100%;
            height: calc(100vh - 60px);
            overflow: hidden;
            background: #f5f5f5;
            position: relative;
        }

        #synopticViewer {
            position: absolute;
            transform-origin: center center;
            cursor: grab;
        }

        .cell-highlight-green rect {
            stroke: green;
            stroke-width: 3;
        }

        .cell-highlight-blue rect {
            stroke: lightblue;
            stroke-width: 3;
        }

        .cell-highlight-red rect {
            stroke: red;
            stroke-width: 3;
        }

        #synopticViewer {
            transition: transform 0.1s ease;
        }

        text {
            user-select: none;
           /* pointer-events: none;*/
        }

        g[class*="equipmentPath_"] {
            pointer-events: all;
            cursor: pointer;
        }

        #customTooltip {
            user-select: none;
            pointer-events: none;
        }
        .modalElement {
            width: fit-content;
        }

    </style>
</head>
<body>
    <div class="container-fluid p-2">
        <div class="d-flex align-items-center gap-2 mb-2">
            <select id="synopticSelect" class="form-select" style="width: 300px;"></select>
            <button id="btnLoad" class="btn btn-primary">Load</button>
            <button id="btnReload" class="btn btn-secondary">Reload SVG</button>
            <button id="btnZoomIn" class="btn btn-outline-dark">Zoom +</button>
            <button id="btnZoomOut" class="btn btn-outline-dark">Zoom -</button>
            <button id="btnZoomReset" class="btn btn-outline-dark">Reset</button>
        </div>
    </div>

    <div id="svgContainer">
        <div id="customTooltip" class="position-absolute bg-dark text-white px-2 py-1 rounded" style="display:none; font-size: 0.8rem; pointer-events: none; z-index: 999;"></div>
        <div id="synopticViewer"></div>
    </div>

    <!-- Modal anomalie -->
    <div class="modal fade" id="anomalyModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dettagli</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <ul id="anomalyList" class="list-group"></ul>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const synopticViewer = document.getElementById('synopticViewer');
        const svgContainer = document.getElementById('svgContainer');
        const synopticSelect = document.getElementById('synopticSelect');
        const anomalyModal = new bootstrap.Modal(document.getElementById('anomalyModal'));
        const anomalyList = document.getElementById('anomalyList');
        const minZoom = 0.7;
        const maxZoom = 3;
        let dataByStazione = {};


        let currentZoom = 1, translateX = 0, translateY = 0;
        let refreshInterval = 5000, intervalId = null;
        let svgElement = null, dataByTableId = {};

        document.getElementById('btnZoomIn').onclick = () => zoom(0.1);
        document.getElementById('btnZoomOut').onclick = () => zoom(-0.1);
        document.getElementById('btnZoomReset').onclick = () => resetZoom();
        document.getElementById('btnLoad').onclick = () => loadSVG();
        document.getElementById('btnReload').onclick = () => reloadSVG();

        function zoom(delta) {
            currentZoom = Math.max(minZoom, Math.min(maxZoom, currentZoom + delta));
            applyTransform();
        }


        function resetZoom() {
            currentZoom = 1; translateX = 0; translateY = 0;
            applyTransform();
        }

        function applyTransform() {
            synopticViewer.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentZoom})`;
        }

        let isDragging = false, startX = 0, startY = 0;
        svgContainer.addEventListener('mousedown', e => {
            isDragging = true;
            startX = e.clientX - translateX;
            startY = e.clientY - translateY;
            synopticViewer.style.cursor = 'grabbing';
        });
        svgContainer.addEventListener('wheel', e => {
            e.preventDefault();
            const delta = e.deltaY < 0 ? 0.1 : -0.1;
            currentZoom = Math.max(0.1, Math.min(5, currentZoom + delta));
            applyTransform();
        }, { passive: false });

        document.addEventListener('mouseup', () => {
            isDragging = false;
            synopticViewer.style.cursor = 'grab';
        });
        document.addEventListener('mousemove', e => {
            if (!isDragging) return;
            translateX = e.clientX - startX;
            translateY = e.clientY - startY;
            applyTransform();
        });

        function loadSVG() {
            const layout = synopticSelect.value;
            if (!layout) return alert('Seleziona un sinottico');

            fetch('/api/v2/GetSynoptic', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ SynopticName: layout })
            })
                .then(r => r.json())
                .then(data => {
                    const svg = data.SynopticList?.[0]?.Svg;
                    synopticViewer.innerHTML = svg || '<p>Errore caricamento SVG</p>';

                    setTimeout(() => {
                        svgElement = synopticViewer.querySelector('svg');
                        resetZoom();
                        processSVG();
                        updateSVG(); // Popola subito se il fetch è lento
                        startAutoRefresh(); // Fa anche fetchData() che richiama updateSVG()
                    }, 100);

                });
        }

        function reloadSVG() {
            stopAutoRefresh();
            loadSVG();
        }

        function startAutoRefresh() {
            intervalId = setInterval(fetchData, refreshInterval);
            fetchData();
        }

        function stopAutoRefresh() {
            clearInterval(intervalId);
        }

        function fetchData() {
            fetch('/api/Assembly')
                .then(r => r.json())
                .then(data => {
                    dataByStazione = {};

                    Object.values(data).flat().forEach(item => {
                        dataByStazione[item.stazione] = item;
                    });

                    updateSVG();
                });
        }

        
        function processSVG() {
            if (!svgElement) return;

            const tooltip = document.getElementById('customTooltip');
            const allCells = svgElement.querySelectorAll('g[class*="equipmentPath_"]');

            allCells.forEach(cell => {
                const cls = [...cell.classList].find(c => c.startsWith('equipmentPath_'));
                if (!cls) return;

                const stazione = cls.replace('equipmentPath_', '');
                const item = dataByStazione[stazione];
                if (!item) return;

                // Tooltip su hover
                cell.addEventListener('mouseenter', (e) => {
                    const tooltip = document.getElementById('customTooltip');
                    const preview = item.anomalie?.[0]?.descrizione || 'Nessuna anomalia';
                    tooltip.textContent = `${item.anomalie?.length || 0} anomalie - ${preview}`;
                    tooltip.style.left = e.pageX + 10 + 'px';
                    tooltip.style.top = e.pageY - 100 + 'px';
                    tooltip.style.display = 'block';
                });

                cell.addEventListener('mousemove', (e) => {
                    const tooltip = document.getElementById('customTooltip');
                    tooltip.style.left = e.pageX + 10 + 'px';
                    tooltip.style.top = e.pageY - 100 + 'px';
                });

                cell.addEventListener('mouseleave', () => {
                    document.getElementById('customTooltip').style.display = 'none';
                });

                cell.addEventListener('click', () => {
                    if (!item.anomalie || item.anomalie.length === 0) return;
                    anomalyList.innerHTML = '';
                    item.anomalie.forEach(a => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item';
                        li.textContent = a.descrizione || JSON.stringify(a);
                        anomalyList.appendChild(li);
                    });
                    anomalyModal.show();
                });
            });

        }

        function updateSVG() {
            if (!svgElement) return;

            const cells = svgElement.querySelectorAll('[class*="equipmentPath_"]');

            cells.forEach(cell => {
                const className = [...cell.classList].find(c => c.startsWith('equipmentPath_'));
                if (!className) return;

                const stazione = className.replace('equipmentPath_', '');
                const item = dataByStazione[stazione];
                if (!item) return;

                // Rimuove tutti gli stili
                cell.classList.remove('cell-highlight-green', 'cell-highlight-red', 'cell-highlight-blue');

                // Se è mercato BEV → blu
                if (item.mercato?.trim().toLowerCase() === 'bev') {
                    cell.classList.add('cell-highlight-blue');
                }
                // Altrimenti rosso se ha anomalie
                else if (item.anomalie?.length > 0) {
                    cell.classList.add('cell-highlight-red');
                }
                // Altrimenti verde
                else {
                    cell.classList.add('cell-highlight-green');
                }


                // Aggiorna contenuti testuali se presenti
                const nprog = cell.querySelector('.op-nprog');
                const nseq = cell.querySelector('.op-nseq');
                const model = cell.querySelector('.op-model');

                if (nprog) nprog.textContent = item.cis;
                if (nseq) nseq.textContent = item.modello;
                if (model) model.textContent = item.telaio;
            });

            setupEvents();
        }

        function setupEvents() {
            const tooltip = document.getElementById('customTooltip');
            const cells = svgElement.querySelectorAll('[class*="equipmentPath_"]');

            cells.forEach(cell => {
                const className = [...cell.classList].find(c => c.startsWith('equipmentPath_'));
                if (!className) return;

                const stazione = className.replace('equipmentPath_', '');
                const item = dataByStazione[stazione];
                if (!item) return;

                // Tooltip su hover – PERSONALIZZATO
                cell.addEventListener('mouseenter', (e) => {
                    const preview = item.anomalie?.[0]?.descrizione || 'Nessuna anomalia';
                    tooltip.textContent = `${item.anomalie?.length || 0} anomalie - ${preview}`;
                    tooltip.style.left = e.pageX + 10 + 'px';
                    tooltip.style.top = e.pageY - 100 + 'px';
                    tooltip.style.display = 'block';
                });

                cell.addEventListener('mousemove', (e) => {
                    tooltip.style.left = e.pageX + 10 + 'px';
                    tooltip.style.top = e.pageY - 100 + 'px';
                });

                cell.addEventListener('mouseleave', () => {
                    tooltip.style.display = 'none';
                });

                cell.addEventListener('click', () => {
                    const infoHtml = [];

                    // Mostra dettagli generici
                    infoHtml.push(`<div style="display:flex; gap: 1rem;"> <div class="modalElement"> <strong>Stazione:</strong> ${item.stazione}`);
                    if (item.sequenza) infoHtml.push(`<strong>Sequenza:</strong> ${item.sequenza}`);
                    if (item.cis) infoHtml.push(`<strong>CIS:</strong> ${item.cis}`);
                    if (item.modello) infoHtml.push(`<strong>Modello:</strong> ${item.modello}`);
                    if (item.motorizzazione) infoHtml.push(`<strong>Motorizzazione:</strong> ${item.motorizzazione} </div>`);
                    if (item.telaio) infoHtml.push(`<div class="modalElement"> <strong>Telaio:</strong> ${item.telaio}`);
                    if (item.allestimento) infoHtml.push(`<strong>Allestimento:</strong> ${item.allestimento}`);
                    if (item.tipoMotore) infoHtml.push(`<strong>Tipo Motore:</strong> ${item.tipoMotore}`);
                    if (item.mercato) infoHtml.push(`<strong>Mercato:</strong> ${item.mercato} </div> </div>`);

                    // Mostra anomalie, se presenti
                    if (item.anomalie?.length > 0) {
                        infoHtml.push('<hr><strong>Anomalie:</strong>');
                        item.anomalie.forEach((a, idx) => {
                            infoHtml.push(`<div><span class="text-danger">#${idx + 1}:</span> ${a.descrizione}</div>`);
                        });
                    } else {
                        infoHtml.push('<hr><em>Nessuna anomalia presente.</em>');
                    }

                    // Inserisci contenuto nel modal
                    anomalyList.innerHTML = '';
                    const li = document.createElement('li');
                    li.className = 'list-group-item';
                    li.innerHTML = infoHtml.join('<br>');
                    anomalyList.appendChild(li);

                    anomalyModal.show();
                });

            });
        }


        function showAnomalyModal(tableid) {
            const item = dataByTableId[tableid];
            if (!item || item.anomalie.length === 0) return;
            anomalyList.innerHTML = '';
            item.anomalie.forEach(a => {
                const li = document.createElement('li');
                li.className = 'list-group-item';
                li.textContent = JSON.stringify(a);
                anomalyList.appendChild(li);
            });
            anomalyModal.show();
        }

        // Init list
        fetch('/api/v2/GetSynopticList', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: '{}'
        })
            .then(r => r.json())
            .then(data => {
                data.SynopticList.forEach(s => {
                    const opt = document.createElement('option');
                    opt.value = s.Name;
                    opt.textContent = s.Name;
                    synopticSelect.appendChild(opt);
                });
            });
    </script>
</body>
</html>